name: Update Stock Analysis Data (Daily - Non-LLM)

on:
  schedule:
    # Run at 1:00 PM (13:00 UTC) Monday to Friday
    - cron: '0 13 * * 1-5'
  # push:
  #   branches: [main]
  #   paths: ['src/**', 'requirements.txt', 'stock-analysis-viewer/**']
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "daily-analysis"
  cancel-in-progress: true

jobs:
  update-base-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create necessary directories
        run: |
          mkdir -p reports
          mkdir -p charts
          mkdir -p logs
      
      - name: Run base stock analysis (non-LLM)
        run: |
          python src/main.py --ticker AMZN,AAPL,GOOGL,DIS,KO,MSFT,NFLX,AVGO,SPY,QQQ,NVDA,TSLA --chinese --charts --save-report --format json --non-llm-only
        env:
          PYTHONPATH: ${{ github.workspace }}
          CACHE_DURATION: "3600"
          FUNDAMENTAL_ANALYSIS_ENABLED: "true"
          LOG_LEVEL: "INFO"
          NEWS_ANALYSIS_ENABLED: "true"
          NODE_ENV: "production"
          SAVE_REPORTS: "true"
          SENTIMENT_ANALYSIS_ENABLED: "false"
          SINA_FINANCE_ENABLED: "true"
          TECHNICAL_ANALYSIS_PERIOD: "252"
          USE_CACHE: "true"
          YAHOO_FINANCE_ENABLED: "true"
        continue-on-error: true
      
      - name: List generated files
        run: |
          echo "Reports directory (root):"
          ls -la reports/ || echo "No root reports directory"
          echo "Charts directory (root):"
          ls -la charts/ || echo "No root charts directory"
          echo "Frontend reports directory:"
          ls -la stock-analysis-viewer/public/reports/ || echo "No frontend reports directory"
          echo "Frontend charts directory:"
          ls -la stock-analysis-viewer/public/charts/ || echo "No frontend charts directory"
          
      - name: Copy generated files to root directories for git tracking
        run: |
          # Copy reports from frontend public directory to root for git tracking
          if [ -d "stock-analysis-viewer/public/reports" ] && [ "$(ls -A stock-analysis-viewer/public/reports/ 2>/dev/null)" ]; then
            echo "Copying reports from frontend to root directory..."
            cp -r stock-analysis-viewer/public/reports/* reports/ 2>/dev/null || true
            echo "Reports copied successfully"
          fi
          
          # Copy charts from frontend public directory to root for git tracking  
          if [ -d "stock-analysis-viewer/public/charts" ] && [ "$(ls -A stock-analysis-viewer/public/charts/ 2>/dev/null)" ]; then
            echo "Copying charts from frontend to root directory..."
            cp -r stock-analysis-viewer/public/charts/* charts/ 2>/dev/null || true
            echo "Charts copied successfully"
          fi
          
          # List what we now have in root directories
          echo "Root reports after copy:"
          ls -la reports/ || echo "No reports found"
          echo "Root charts after copy:"
          ls -la charts/ || echo "No charts found"
      
      - name: Create placeholder files if analysis failed
        run: |
          # Create placeholder files if directories are empty
          if [ ! "$(ls -A reports/)" ]; then
            echo '{"error": "Analysis failed", "timestamp": "'$(date)'", "message": "Base stock analysis could not be completed. Please check the logs."}' > reports/placeholder.json
          fi
          if [ ! "$(ls -A charts/)" ]; then
            touch charts/placeholder.txt
            echo "Charts will be available after successful analysis" > charts/placeholder.txt
          fi

      - name: Clean up outdated files (keep last 7 days)
        run: |
          echo "Cleaning up files older than 7 days..."

          # Calculate cutoff date (7 days ago)
          CUTOFF_DATE=$(date -d '7 days ago' '+%Y%m%d' 2>/dev/null || date -v-7d '+%Y%m%d' 2>/dev/null || echo "20240101")
          echo "Cutoff date: $CUTOFF_DATE"

          # Function to clean files in a directory
          cleanup_directory() {
            local dir="$1"
            local file_pattern="$2"
            local description="$3"

            if [ -d "$dir" ]; then
              echo "Cleaning $description in $dir..."

              # Find and list files to be deleted
              find "$dir" -name "$file_pattern" -type f | while read file; do
                # Extract date from filename (assuming format: *_YYYYMMDD_* or *_YYYY-MM-DD_*)
                filename=$(basename "$file")

                # Try different date extraction patterns
                file_date=""

                # Pattern 1: YYYYMMDD_HHMMSS format
                if [[ "$filename" =~ _([0-9]{8})_[0-9]{6} ]]; then
                  file_date="${BASH_REMATCH[1]}"
                # Pattern 2: YYYY-MM-DD format
                elif [[ "$filename" =~ _([0-9]{4}-[0-9]{2}-[0-9]{2}) ]]; then
                  file_date=$(echo "${BASH_REMATCH[1]}" | tr -d '-')
                # Pattern 3: YYYYMMDD format
                elif [[ "$filename" =~ _([0-9]{8}) ]]; then
                  file_date="${BASH_REMATCH[1]}"
                fi

                # Delete if file is older than cutoff date
                if [ -n "$file_date" ] && [ "$file_date" -lt "$CUTOFF_DATE" ]; then
                  echo "Deleting old file: $file (date: $file_date)"
                  rm -f "$file"
                else
                  echo "Keeping file: $file (date: $file_date)"
                fi
              done
            else
              echo "Directory $dir does not exist, skipping cleanup"
            fi
          }

          # Clean up different file types
          cleanup_directory "reports" "*_analysis_*.json" "analysis reports"
          cleanup_directory "reports" "*.json" "JSON reports"
          cleanup_directory "charts" "*.png" "chart images"
          cleanup_directory "charts" "*.jpg" "chart images"
          cleanup_directory "charts" "*.svg" "chart images"
          cleanup_directory "stock-analysis-viewer/public/reports" "*_analysis_*.json" "frontend analysis reports"
          cleanup_directory "stock-analysis-viewer/public/reports" "*.json" "frontend JSON reports"
          cleanup_directory "stock-analysis-viewer/public/charts" "*.png" "frontend chart images"
          cleanup_directory "stock-analysis-viewer/public/charts" "*.jpg" "frontend chart images"
          cleanup_directory "stock-analysis-viewer/public/charts" "*.svg" "frontend chart images"

          # Show remaining files
          echo "Remaining files after cleanup:"
          echo "Reports directory:"
          ls -la reports/ 2>/dev/null | head -20 || echo "No reports directory"
          echo "Charts directory:"
          ls -la charts/ 2>/dev/null | head -10 || echo "No charts directory"
          echo "Frontend reports directory:"
          ls -la stock-analysis-viewer/public/reports/ 2>/dev/null | head -20 || echo "No frontend reports directory"
          echo "Frontend charts directory:"
          ls -la stock-analysis-viewer/public/charts/ 2>/dev/null | head -10 || echo "No frontend charts directory"

      # Commit the updated data back to the repository
      - name: Commit updated data and cleanup
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add new files and stage deletions
          git add reports/ charts/ stock-analysis-viewer/public/reports/ stock-analysis-viewer/public/charts/ || true

          # Stage any deleted files (cleanup)
          git add -u reports/ charts/ stock-analysis-viewer/public/reports/ stock-analysis-viewer/public/charts/ || true

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # Check what changes we're committing
            echo "Changes to be committed:"
            git diff --cached --name-status

            git commit -m "Auto-update base stock analysis data (daily) and cleanup old files [skip ci]"
            git push
          fi
      
      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: base-stock-analysis-data
          path: |
            reports/
            charts/
            stock-analysis-viewer/public/reports/
            stock-analysis-viewer/public/charts/
          if-no-files-found: warn

  deploy-github-pages:
    needs: update-base-analysis
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: base-stock-analysis-data
          path: ./
        continue-on-error: true
      
      - name: Sync reports to frontend
        run: |
          # Ensure frontend directories exist
          mkdir -p stock-analysis-viewer/public/reports
          mkdir -p stock-analysis-viewer/public/charts
          
          # Copy from downloaded artifacts (if any) to frontend
          if [ -d "reports" ] && [ "$(ls -A reports/ 2>/dev/null)" ]; then
            cp -r reports/* stock-analysis-viewer/public/reports/ 2>/dev/null || true
            echo "Copied reports from artifacts to frontend"
          else
            echo "No reports in artifacts to copy"
          fi
          
          if [ -d "charts" ] && [ "$(ls -A charts/ 2>/dev/null)" ]; then
            cp -r charts/* stock-analysis-viewer/public/charts/ 2>/dev/null || true
            echo "Copied charts from artifacts to frontend"
          else
            echo "No charts in artifacts to copy"
          fi
          
          # List final frontend directory contents
          echo "Final frontend reports:"
          ls -la stock-analysis-viewer/public/reports/ || echo "No frontend reports"
          echo "Final frontend charts:"
          ls -la stock-analysis-viewer/public/charts/ || echo "No frontend charts"
          
          # Create a data manifest for the frontend
          echo "Creating data manifest..."
          cat > stock-analysis-viewer/public/manifest.json << EOF
          {
            "lastUpdated": "$(date -u '+%Y-%m-%dT%H:%M:%S.%3NZ')",
            "ticker": "AMZN",
            "reports": $(find stock-analysis-viewer/public/reports -name "*.json" 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/reports/"; ""))' || echo '[]'),
            "charts": $(find stock-analysis-viewer/public/charts -type f 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/charts/"; ""))' || echo '[]'),
            "status": "$([ -f "reports/placeholder.json" ] && echo "failed" || echo "success")"
          }
          EOF
      
      - name: Install frontend dependencies
        working-directory: ./stock-analysis-viewer
        run: npm install
      
      - name: Build frontend
        working-directory: ./stock-analysis-viewer
        run: |
          npm run build
        env:
          NODE_ENV: production
          NEXT_OUTPUT: export
      
      - name: Add .nojekyll to output directory  
        run: touch stock-analysis-viewer/out/.nojekyll

      - uses: actions/configure-pages@v4
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./stock-analysis-viewer/out
      - id: deployment
        uses: actions/deploy-pages@v4

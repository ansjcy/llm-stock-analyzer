name: Update Stock Analysis and Deploy to GitHub Pages

on:
  schedule:
    # Run at 1:00 PM (13:00 UTC) Monday to Friday
    - cron: '0 13 * * 1-5'
  push:
    branches: [main]
    paths: ['src/**', 'requirements.txt', 'stock-analysis-viewer/**']
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  update-stock-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create necessary directories
        run: |
          mkdir -p reports
          mkdir -p charts
          mkdir -p logs
      
      - name: Run stock analysis
        run: |
          python src/main.py --ticker AMZN --chinese --charts --save-report --format json
        env:
          PYTHONPATH: ${{ github.workspace }}
        continue-on-error: true
      
      - name: List generated files
        run: |
          echo "Reports directory:"
          ls -la reports/ || echo "No reports directory"
          echo "Charts directory:"
          ls -la charts/ || echo "No charts directory"
      
      - name: Create placeholder files if analysis failed
        run: |
          # Create placeholder files if directories are empty
          if [ ! "$(ls -A reports/)" ]; then
            echo '{"error": "Analysis failed", "timestamp": "'$(date)'", "message": "Stock analysis could not be completed. Please check the logs."}' > reports/placeholder.json
          fi
          if [ ! "$(ls -A charts/)" ]; then
            touch charts/placeholder.txt
            echo "Charts will be available after successful analysis" > charts/placeholder.txt
          fi
      
      # Commit the updated data back to the repository
      - name: Commit updated data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add reports/ charts/ || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update stock analysis data [skip ci]"
            git push
          fi
      
      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: stock-analysis-data
          path: |
            reports/
            charts/
          if-no-files-found: warn

  deploy-github-pages:
    needs: update-stock-analysis
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: stock-analysis-data
          path: ./
        continue-on-error: true
      
      - name: Sync reports to frontend
        run: |
          # Copy reports and charts to the frontend's public directory
          mkdir -p stock-analysis-viewer/public/reports
          mkdir -p stock-analysis-viewer/public/charts
          
          # Copy reports
          if [ -d "reports" ] && [ "$(ls -A reports/)" ]; then
            cp -r reports/* stock-analysis-viewer/public/reports/ 2>/dev/null || true
            echo "Copied reports to frontend"
          fi
          
          # Copy charts  
          if [ -d "charts" ] && [ "$(ls -A charts/)" ]; then
            cp -r charts/* stock-analysis-viewer/public/charts/ 2>/dev/null || true
            echo "Copied charts to frontend"
          fi
          
          # Create a data manifest for the frontend
          echo "Creating data manifest..."
          cat > stock-analysis-viewer/public/manifest.json << EOF
          {
            "lastUpdated": "$(date -u '+%Y-%m-%dT%H:%M:%S.%3NZ')",
            "ticker": "AMZN",
            "reports": $(find stock-analysis-viewer/public/reports -name "*.json" 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/reports/"; ""))' || echo '[]'),
            "charts": $(find stock-analysis-viewer/public/charts -type f 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/charts/"; ""))' || echo '[]'),
            "status": "$([ -f "reports/placeholder.json" ] && echo "failed" || echo "success")"
          }
          EOF
      
      - name: Install frontend dependencies
        working-directory: ./stock-analysis-viewer
        run: npm install
      
      - name: Build frontend
        working-directory: ./stock-analysis-viewer
        run: |
          npm run build
        env:
          NODE_ENV: production
          NEXT_OUTPUT: export
      
      - name: Add .nojekyll to output directory  
        run: touch stock-analysis-viewer/out/.nojekyll

      - uses: actions/configure-pages@v4
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./stock-analysis-viewer/out
      - id: deployment
        uses: actions/deploy-pages@v4 
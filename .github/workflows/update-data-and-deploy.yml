name: Update Stock Analysis and Deploy to GitHub Pages (Legacy - Enhanced)

# Legacy workflow with enhanced support for both base-only and full analysis
on:
  workflow_dispatch:
    inputs:
      analysis_mode:
        description: 'Analysis mode to run'
        required: true
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'base-only'
          - 'llm-only'
      force_run:
        description: 'Force run this legacy workflow'
        required: false
        default: 'false'
  push:
    branches: [main]
    paths: ['src/**', 'requirements.txt', 'stock-analysis-viewer/**']
# Original triggers (disabled - use daily/weekly workflows instead):
#   schedule:
#     # Run at 1:00 PM (13:00 UTC) Monday to Friday
#     - cron: '0 13 * * 1-5'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  update-stock-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create necessary directories
        run: |
          mkdir -p reports
          mkdir -p charts
          mkdir -p logs
      
      - name: Run stock analysis (Base-only mode)
        if: ${{ github.event.inputs.analysis_mode == 'base-only' || github.event.inputs.analysis_mode == '' }}
        run: |
          python src/main.py --ticker AMZN,AAPL,GOOGL,DIS,KO,MSFT,NFLX,AVGO,SPY,QQQ,NVDA,TSLA --chinese --charts --save-report --format json --non-llm-only
        env:
          PYTHONPATH: ${{ github.workspace }}
          CACHE_DURATION: "3600"
          FUNDAMENTAL_ANALYSIS_ENABLED: "true"
          LOG_LEVEL: "INFO"
          NEWS_ANALYSIS_ENABLED: "true"
          NODE_ENV: "production"
          SAVE_REPORTS: "true"
          SENTIMENT_ANALYSIS_ENABLED: "false"
          SINA_FINANCE_ENABLED: "true"
          TECHNICAL_ANALYSIS_PERIOD: "252"
          USE_CACHE: "true"
          YAHOO_FINANCE_ENABLED: "true"
        continue-on-error: true

      - name: Run stock analysis (Full mode with LLM)
        if: ${{ github.event.inputs.analysis_mode == 'full' }}
        run: |
          python src/main.py --ticker AMZN,AAPL,GOOGL,DIS,KO,MSFT,NFLX,AVGO,SPY,QQQ,NVDA,TSLA --chinese --charts --save-report --format json
        env:
          PYTHONPATH: ${{ github.workspace }}
          GEMINI_API_KEYS: ${{ secrets.GEMINI_API_KEYS }}
          CACHE_DURATION: "3600"
          DEFAULT_LLM_PROVIDER: "gemini"
          FUNDAMENTAL_ANALYSIS_ENABLED: "true"
          LOG_LEVEL: "INFO"
          NEWS_ANALYSIS_ENABLED: "true"
          NODE_ENV: "production"
          SAVE_REPORTS: "true"
          SENTIMENT_ANALYSIS_ENABLED: "true"
          SINA_FINANCE_ENABLED: "true"
          TECHNICAL_ANALYSIS_PERIOD: "252"
          USE_CACHE: "true"
          YAHOO_FINANCE_ENABLED: "true"
        continue-on-error: true

      - name: Run LLM-only analysis (Enhanced mode)
        if: ${{ github.event.inputs.analysis_mode == 'llm-only' }}
        run: |
          # Define tickers
          TICKERS="AMZN AAPL GOOGL DIS KO MSFT NFLX AVGO SPY QQQ NVDA TSLA"

          echo "Running LLM-only analysis with enhanced merging..."

          for ticker in $TICKERS; do
            # Find the most recent base file for this ticker
            LATEST_FILE=$(find stock-analysis-viewer/public/reports -name "${ticker}_analysis_base_*.json" -type f | sort -r | head -1)
            if [ -n "$LATEST_FILE" ]; then
              echo "Processing LLM analysis for $ticker using: $LATEST_FILE"

              # Run enhanced LLM-only mode (creates both LLM and merged files)
              timeout 480 python src/main.py --llm-only --base-data-path "$LATEST_FILE" --save-report --format json --chinese || {
                echo "LLM analysis for $ticker timed out or failed"
                # Create error file for this ticker
                echo "{\"error\": \"LLM analysis timeout\", \"ticker\": \"$ticker\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > "stock-analysis-viewer/public/reports/${ticker}_llm_error_$(date +%Y%m%d_%H%M%S).json"
              }
            else
              echo "Warning: No base file found for $ticker - skipping LLM analysis"
            fi
          done
        env:
          PYTHONPATH: ${{ github.workspace }}
          GEMINI_API_KEYS: ${{ secrets.GEMINI_API_KEYS }}
          CACHE_DURATION: "3600"
          DEFAULT_LLM_PROVIDER: "gemini"
          FUNDAMENTAL_ANALYSIS_ENABLED: "true"
          LOG_LEVEL: "INFO"
          NEWS_ANALYSIS_ENABLED: "true"
          NODE_ENV: "production"
          SAVE_REPORTS: "true"
          SENTIMENT_ANALYSIS_ENABLED: "true"
          SINA_FINANCE_ENABLED: "true"
          TECHNICAL_ANALYSIS_PERIOD: "252"
          USE_CACHE: "true"
          YAHOO_FINANCE_ENABLED: "true"
          # Timeout configurations
          GEMINI_RETRY_MAX_ATTEMPTS: "4"
          GEMINI_RETRY_BASE_DELAY: "0.5"
          GEMINI_RETRY_MAX_DELAY: "10"
          GEMINI_KEY_WAIT_TIMEOUT: "30"
          LLM_ANALYSIS_TIMEOUT: "180"
          LLM_TOTAL_TIMEOUT: "1200"
        continue-on-error: true
      
      - name: List generated files
        run: |
          echo "Reports directory (root):"
          ls -la reports/ || echo "No root reports directory"
          echo "Charts directory (root):"
          ls -la charts/ || echo "No root charts directory"
          echo "Frontend reports directory:"
          ls -la stock-analysis-viewer/public/reports/ || echo "No frontend reports directory"
          echo "Frontend charts directory:"
          ls -la stock-analysis-viewer/public/charts/ || echo "No frontend charts directory"

          # Show different file types based on analysis mode
          echo "Analysis mode: ${{ github.event.inputs.analysis_mode }}"
          if [ "${{ github.event.inputs.analysis_mode }}" = "base-only" ]; then
            echo "Base files generated:"
            find stock-analysis-viewer/public/reports -name "*_analysis_base_*.json" -type f || echo "No base files found"
          elif [ "${{ github.event.inputs.analysis_mode }}" = "llm-only" ]; then
            echo "LLM files generated:"
            find stock-analysis-viewer/public/reports -name "*_llm_*.json" -type f || echo "No LLM files found"
            echo "Complete merged files generated:"
            find stock-analysis-viewer/public/reports -name "*_analysis_*.json" -not -name "*_analysis_base_*" -not -name "*_analysis_llm_*" -type f || echo "No merged files found"
          else
            echo "Complete analysis files generated:"
            find stock-analysis-viewer/public/reports -name "*_analysis_*.json" -type f || echo "No analysis files found"
          fi
          
      - name: Copy generated files to root directories for git tracking
        run: |
          # Copy reports from frontend public directory to root for git tracking
          if [ -d "stock-analysis-viewer/public/reports" ] && [ "$(ls -A stock-analysis-viewer/public/reports/ 2>/dev/null)" ]; then
            echo "Copying reports from frontend to root directory..."
            cp -r stock-analysis-viewer/public/reports/* reports/ 2>/dev/null || true
            echo "Reports copied successfully"
          fi
          
          # Copy charts from frontend public directory to root for git tracking  
          if [ -d "stock-analysis-viewer/public/charts" ] && [ "$(ls -A stock-analysis-viewer/public/charts/ 2>/dev/null)" ]; then
            echo "Copying charts from frontend to root directory..."
            cp -r stock-analysis-viewer/public/charts/* charts/ 2>/dev/null || true
            echo "Charts copied successfully"
          fi
          
          # List what we now have in root directories
          echo "Root reports after copy:"
          ls -la reports/ || echo "No reports found"
          echo "Root charts after copy:"
          ls -la charts/ || echo "No charts found"
      
      - name: Create placeholder files if analysis failed
        run: |
          # Create placeholder files if directories are empty
          if [ ! "$(ls -A reports/)" ]; then
            echo '{"error": "Analysis failed", "timestamp": "'$(date)'", "message": "Stock analysis could not be completed. Please check the logs."}' > reports/placeholder.json
          fi
          if [ ! "$(ls -A charts/)" ]; then
            touch charts/placeholder.txt
            echo "Charts will be available after successful analysis" > charts/placeholder.txt
          fi
      
      # Commit the updated data back to the repository
      - name: Commit updated data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Add both root directories and frontend public directories
          git add reports/ charts/ stock-analysis-viewer/public/reports/ stock-analysis-viewer/public/charts/ || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            ANALYSIS_MODE="${{ github.event.inputs.analysis_mode }}"
            if [ "$ANALYSIS_MODE" = "base-only" ]; then
              git commit -m "Auto-update base stock analysis data (legacy workflow) [skip ci]"
            elif [ "$ANALYSIS_MODE" = "llm-only" ]; then
              git commit -m "Auto-update LLM analysis and merged reports (legacy workflow) [skip ci]"
            elif [ "$ANALYSIS_MODE" = "full" ]; then
              git commit -m "Auto-update complete stock analysis data (legacy workflow) [skip ci]"
            else
              git commit -m "Auto-update stock analysis data (legacy workflow) [skip ci]"
            fi
            git push
          fi
      
      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: stock-analysis-data
          path: |
            reports/
            charts/
            stock-analysis-viewer/public/reports/
            stock-analysis-viewer/public/charts/
          if-no-files-found: warn

  deploy-github-pages:
    needs: update-stock-analysis
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: stock-analysis-data
          path: ./
        continue-on-error: true
      
      - name: Sync reports to frontend
        run: |
          # Ensure frontend directories exist
          mkdir -p stock-analysis-viewer/public/reports
          mkdir -p stock-analysis-viewer/public/charts
          
          # Copy from downloaded artifacts (if any) to frontend
          if [ -d "reports" ] && [ "$(ls -A reports/ 2>/dev/null)" ]; then
            cp -r reports/* stock-analysis-viewer/public/reports/ 2>/dev/null || true
            echo "Copied reports from artifacts to frontend"
          else
            echo "No reports in artifacts to copy"
          fi
          
          if [ -d "charts" ] && [ "$(ls -A charts/ 2>/dev/null)" ]; then
            cp -r charts/* stock-analysis-viewer/public/charts/ 2>/dev/null || true
            echo "Copied charts from artifacts to frontend"
          else
            echo "No charts in artifacts to copy"
          fi
          
          # List final frontend directory contents
          echo "Final frontend reports:"
          ls -la stock-analysis-viewer/public/reports/ || echo "No frontend reports"
          echo "Final frontend charts:"
          ls -la stock-analysis-viewer/public/charts/ || echo "No frontend charts"
          
          # Create a data manifest for the frontend
          echo "Creating data manifest..."
          ANALYSIS_MODE="${{ github.event.inputs.analysis_mode }}"
          cat > stock-analysis-viewer/public/manifest.json << EOF
          {
            "lastUpdated": "$(date -u '+%Y-%m-%dT%H:%M:%S.%3NZ')",
            "ticker": "AMZN",
            "analysisMode": "${ANALYSIS_MODE:-full}",
            "reports": $(find stock-analysis-viewer/public/reports -name "*.json" 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/reports/"; ""))' || echo '[]'),
            "charts": $(find stock-analysis-viewer/public/charts -type f 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/charts/"; ""))' || echo '[]'),
            "status": "$([ -f "reports/placeholder.json" ] && echo "failed" || echo "success")",
            "baseFiles": $(find stock-analysis-viewer/public/reports -name "*_analysis_base_*.json" 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/reports/"; ""))' || echo '[]'),
            "llmFiles": $(find stock-analysis-viewer/public/reports -name "*_llm_*.json" 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/reports/"; ""))' || echo '[]'),
            "mergedFiles": $(find stock-analysis-viewer/public/reports -name "*_analysis_*.json" -not -name "*_analysis_base_*" -not -name "*_analysis_llm_*" 2>/dev/null | jq -R -s -c 'split("\n")[:-1] | map(gsub("stock-analysis-viewer/public/reports/"; ""))' || echo '[]')
          }
          EOF
      
      - name: Install frontend dependencies
        working-directory: ./stock-analysis-viewer
        run: npm install
      
      - name: Build frontend
        working-directory: ./stock-analysis-viewer
        run: |
          npm run build
        env:
          NODE_ENV: production
          NEXT_OUTPUT: export
      
      - name: Add .nojekyll to output directory  
        run: touch stock-analysis-viewer/out/.nojekyll

      - uses: actions/configure-pages@v4
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./stock-analysis-viewer/out
      - id: deployment
        uses: actions/deploy-pages@v4 